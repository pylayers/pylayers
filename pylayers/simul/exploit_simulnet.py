from pylayers.util.save import *
import matplotlib.pyplot as plt
import numpy as np
import pdb
class exploit(object):

	def __init__(self,filename='save'):

		sa=Save()
		self.data=sa.load(filename)
		self.saveopt=self.data['saveopt']
		self.data.pop('saveopt')

		self.type=self.saveopt['type']
		self.nodes=self.type
		self.layout=Layout(self.saveopt['Layout']) 
		
		color=['r','g','b','k','y']

		self.agents=[]
		self.ap=[]
		for i in self.saveopt['type'].keys():
			if self.saveopt['type'][i] == 'ag':
				self.agents.append(i)
			else :
				self.ap.append(i)
		self.colors={}
		for i,n in enumerate(self.nodes):
			self.colors[n]=color[i]


	def plot_traj(self,ap=True,ag=True):

		fig = plt.figure('trajectory', figsize=(20, 5), dpi=100)
		fig, ax = self.layout.showG('s',fig=fig,nodes=False)

		if ag:
			for i,n in enumerate(self.agents):
				for j,p in enumerate(self.data[n]['p']):
					if j == 0:
						ax.plot(p[0],p[1],'o',color=self.colors[n],ms=5,label='agent #'+n)
					else: # to avoid multiple label in legend
						ax.plot(p[0],p[1],'o',color=self.colors[n],ms=5)
		if ap:
			for i,n in enumerate(self.ap):
				ax.plot(self.data[n]['p'][0,0],self.data[n]['p'][0,1]
						,'^',color=self.colors[n],ms=5,label='AP #'+n)

		plt.grid('off')
		plt.legend(numpoints=1)

	def plot_ldp(self,node,rat='rat1',ldp='Pr'):

		if ldp == 'Pr':
			title_name='Received Power'
			y_name='Power (dBm)'
			x_name='time (s)'
		elif ldp == 'TOA':
			title_name='Excess time of arrival'
			y_name='delay (ns)'
			x_name='time (s)'

		nbax = len(self.nodes)-1
		f,ax = plt.subplots(nbax,1)


		time = np.linspace(0,self.saveopt['duration'],self.saveopt['nbsamples'] )
		ax_i=0
		for n in self.nodes:
			if n != node :
				print n
				value = self.data[node][n][rat][ldp][:,0]
				ax[ax_i].scatter(time,value,color=self.colors[n])
				ax[ax_i].set_title(title_name +' between '+ self.type[node] + node + ' and '+ self.type[n] + n )		
				ax[ax_i].set_title(title_name +' between '+ self.type[node] + node + ' and '+ self.type[n] + n )		
				ax[ax_i].set_xlabel(x_name)			
				ax[ax_i].set_ylabel(y_name)			
				ax_i = ax_i+1

		plt.grid('off')
		f.tight_layout()



if __name__ =='__main__':

	plt.ion()
	X=exploit()
	X.plot_traj()
	X.plot_ldp('1')
	plt.show()